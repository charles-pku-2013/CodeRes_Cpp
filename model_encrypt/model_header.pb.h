// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_model_5fheader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_model_5fheader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_model_5fheader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_model_5fheader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_5fheader_2eproto;
namespace newtranx {
namespace ai_server {
class ModelHeader;
class ModelHeaderDefaultTypeInternal;
extern ModelHeaderDefaultTypeInternal _ModelHeader_default_instance_;
}  // namespace ai_server
}  // namespace newtranx
PROTOBUF_NAMESPACE_OPEN
template<> ::newtranx::ai_server::ModelHeader* Arena::CreateMaybeMessage<::newtranx::ai_server::ModelHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace newtranx {
namespace ai_server {

// ===================================================================

class ModelHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:newtranx.ai_server.ModelHeader) */ {
 public:
  inline ModelHeader() : ModelHeader(nullptr) {};
  virtual ~ModelHeader();

  ModelHeader(const ModelHeader& from);
  ModelHeader(ModelHeader&& from) noexcept
    : ModelHeader() {
    *this = ::std::move(from);
  }

  inline ModelHeader& operator=(const ModelHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelHeader& operator=(ModelHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelHeader* internal_default_instance() {
    return reinterpret_cast<const ModelHeader*>(
               &_ModelHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelHeader& a, ModelHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelHeader* New() const final {
    return CreateMaybeMessage<ModelHeader>(nullptr);
  }

  ModelHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelHeader& from);
  void MergeFrom(const ModelHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "newtranx.ai_server.ModelHeader";
  }
  protected:
  explicit ModelHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_model_5fheader_2eproto);
    return ::descriptor_table_model_5fheader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelIdFieldNumber = 10,
    kExpireDateFieldNumber = 20,
    kChecksumFieldNumber = 60,
    kOriginalFilenameFieldNumber = 70,
    kStartPosFieldNumber = 40,
    kEndPosFieldNumber = 50,
    kNConcurrencyFieldNumber = 30,
    kIsDirectoryFieldNumber = 80,
  };
  // string model_id = 10;
  void clear_model_id();
  const std::string& model_id() const;
  void set_model_id(const std::string& value);
  void set_model_id(std::string&& value);
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  std::string* mutable_model_id();
  std::string* release_model_id();
  void set_allocated_model_id(std::string* model_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_model_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_model_id(
      std::string* model_id);
  private:
  const std::string& _internal_model_id() const;
  void _internal_set_model_id(const std::string& value);
  std::string* _internal_mutable_model_id();
  public:

  // string expire_date = 20;
  void clear_expire_date();
  const std::string& expire_date() const;
  void set_expire_date(const std::string& value);
  void set_expire_date(std::string&& value);
  void set_expire_date(const char* value);
  void set_expire_date(const char* value, size_t size);
  std::string* mutable_expire_date();
  std::string* release_expire_date();
  void set_allocated_expire_date(std::string* expire_date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_expire_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_expire_date(
      std::string* expire_date);
  private:
  const std::string& _internal_expire_date() const;
  void _internal_set_expire_date(const std::string& value);
  std::string* _internal_mutable_expire_date();
  public:

  // string checksum = 60;
  void clear_checksum();
  const std::string& checksum() const;
  void set_checksum(const std::string& value);
  void set_checksum(std::string&& value);
  void set_checksum(const char* value);
  void set_checksum(const char* value, size_t size);
  std::string* mutable_checksum();
  std::string* release_checksum();
  void set_allocated_checksum(std::string* checksum);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_checksum();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_checksum(
      std::string* checksum);
  private:
  const std::string& _internal_checksum() const;
  void _internal_set_checksum(const std::string& value);
  std::string* _internal_mutable_checksum();
  public:

  // string original_filename = 70;
  void clear_original_filename();
  const std::string& original_filename() const;
  void set_original_filename(const std::string& value);
  void set_original_filename(std::string&& value);
  void set_original_filename(const char* value);
  void set_original_filename(const char* value, size_t size);
  std::string* mutable_original_filename();
  std::string* release_original_filename();
  void set_allocated_original_filename(std::string* original_filename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_original_filename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_original_filename(
      std::string* original_filename);
  private:
  const std::string& _internal_original_filename() const;
  void _internal_set_original_filename(const std::string& value);
  std::string* _internal_mutable_original_filename();
  public:

  // uint64 start_pos = 40;
  void clear_start_pos();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_pos() const;
  void set_start_pos(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_pos() const;
  void _internal_set_start_pos(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 end_pos = 50;
  void clear_end_pos();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_pos() const;
  void set_end_pos(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_pos() const;
  void _internal_set_end_pos(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 n_concurrency = 30;
  void clear_n_concurrency();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_concurrency() const;
  void set_n_concurrency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_concurrency() const;
  void _internal_set_n_concurrency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_directory = 80;
  void clear_is_directory();
  bool is_directory() const;
  void set_is_directory(bool value);
  private:
  bool _internal_is_directory() const;
  void _internal_set_is_directory(bool value);
  public:

  // @@protoc_insertion_point(class_scope:newtranx.ai_server.ModelHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expire_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checksum_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_filename_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_pos_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_concurrency_;
  bool is_directory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_5fheader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelHeader

// string model_id = 10;
inline void ModelHeader::clear_model_id() {
  model_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelHeader::model_id() const {
  // @@protoc_insertion_point(field_get:newtranx.ai_server.ModelHeader.model_id)
  return _internal_model_id();
}
inline void ModelHeader::set_model_id(const std::string& value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:newtranx.ai_server.ModelHeader.model_id)
}
inline std::string* ModelHeader::mutable_model_id() {
  // @@protoc_insertion_point(field_mutable:newtranx.ai_server.ModelHeader.model_id)
  return _internal_mutable_model_id();
}
inline const std::string& ModelHeader::_internal_model_id() const {
  return model_id_.Get();
}
inline void ModelHeader::_internal_set_model_id(const std::string& value) {
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelHeader::set_model_id(std::string&& value) {
  
  model_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:newtranx.ai_server.ModelHeader.model_id)
}
inline void ModelHeader::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:newtranx.ai_server.ModelHeader.model_id)
}
inline void ModelHeader::set_model_id(const char* value,
    size_t size) {
  
  model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:newtranx.ai_server.ModelHeader.model_id)
}
inline std::string* ModelHeader::_internal_mutable_model_id() {
  
  return model_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelHeader::release_model_id() {
  // @@protoc_insertion_point(field_release:newtranx.ai_server.ModelHeader.model_id)
  return model_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelHeader::set_allocated_model_id(std::string* model_id) {
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:newtranx.ai_server.ModelHeader.model_id)
}
inline std::string* ModelHeader::unsafe_arena_release_model_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:newtranx.ai_server.ModelHeader.model_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return model_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ModelHeader::unsafe_arena_set_allocated_model_id(
    std::string* model_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (model_id != nullptr) {
    
  } else {
    
  }
  model_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      model_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:newtranx.ai_server.ModelHeader.model_id)
}

// string expire_date = 20;
inline void ModelHeader::clear_expire_date() {
  expire_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelHeader::expire_date() const {
  // @@protoc_insertion_point(field_get:newtranx.ai_server.ModelHeader.expire_date)
  return _internal_expire_date();
}
inline void ModelHeader::set_expire_date(const std::string& value) {
  _internal_set_expire_date(value);
  // @@protoc_insertion_point(field_set:newtranx.ai_server.ModelHeader.expire_date)
}
inline std::string* ModelHeader::mutable_expire_date() {
  // @@protoc_insertion_point(field_mutable:newtranx.ai_server.ModelHeader.expire_date)
  return _internal_mutable_expire_date();
}
inline const std::string& ModelHeader::_internal_expire_date() const {
  return expire_date_.Get();
}
inline void ModelHeader::_internal_set_expire_date(const std::string& value) {
  
  expire_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelHeader::set_expire_date(std::string&& value) {
  
  expire_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:newtranx.ai_server.ModelHeader.expire_date)
}
inline void ModelHeader::set_expire_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expire_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:newtranx.ai_server.ModelHeader.expire_date)
}
inline void ModelHeader::set_expire_date(const char* value,
    size_t size) {
  
  expire_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:newtranx.ai_server.ModelHeader.expire_date)
}
inline std::string* ModelHeader::_internal_mutable_expire_date() {
  
  return expire_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelHeader::release_expire_date() {
  // @@protoc_insertion_point(field_release:newtranx.ai_server.ModelHeader.expire_date)
  return expire_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelHeader::set_allocated_expire_date(std::string* expire_date) {
  if (expire_date != nullptr) {
    
  } else {
    
  }
  expire_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expire_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:newtranx.ai_server.ModelHeader.expire_date)
}
inline std::string* ModelHeader::unsafe_arena_release_expire_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:newtranx.ai_server.ModelHeader.expire_date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return expire_date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ModelHeader::unsafe_arena_set_allocated_expire_date(
    std::string* expire_date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (expire_date != nullptr) {
    
  } else {
    
  }
  expire_date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      expire_date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:newtranx.ai_server.ModelHeader.expire_date)
}

// uint32 n_concurrency = 30;
inline void ModelHeader::clear_n_concurrency() {
  n_concurrency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelHeader::_internal_n_concurrency() const {
  return n_concurrency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModelHeader::n_concurrency() const {
  // @@protoc_insertion_point(field_get:newtranx.ai_server.ModelHeader.n_concurrency)
  return _internal_n_concurrency();
}
inline void ModelHeader::_internal_set_n_concurrency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_concurrency_ = value;
}
inline void ModelHeader::set_n_concurrency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_concurrency(value);
  // @@protoc_insertion_point(field_set:newtranx.ai_server.ModelHeader.n_concurrency)
}

// uint64 start_pos = 40;
inline void ModelHeader::clear_start_pos() {
  start_pos_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelHeader::_internal_start_pos() const {
  return start_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelHeader::start_pos() const {
  // @@protoc_insertion_point(field_get:newtranx.ai_server.ModelHeader.start_pos)
  return _internal_start_pos();
}
inline void ModelHeader::_internal_set_start_pos(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_pos_ = value;
}
inline void ModelHeader::set_start_pos(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_pos(value);
  // @@protoc_insertion_point(field_set:newtranx.ai_server.ModelHeader.start_pos)
}

// uint64 end_pos = 50;
inline void ModelHeader::clear_end_pos() {
  end_pos_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelHeader::_internal_end_pos() const {
  return end_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ModelHeader::end_pos() const {
  // @@protoc_insertion_point(field_get:newtranx.ai_server.ModelHeader.end_pos)
  return _internal_end_pos();
}
inline void ModelHeader::_internal_set_end_pos(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_pos_ = value;
}
inline void ModelHeader::set_end_pos(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_pos(value);
  // @@protoc_insertion_point(field_set:newtranx.ai_server.ModelHeader.end_pos)
}

// string checksum = 60;
inline void ModelHeader::clear_checksum() {
  checksum_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelHeader::checksum() const {
  // @@protoc_insertion_point(field_get:newtranx.ai_server.ModelHeader.checksum)
  return _internal_checksum();
}
inline void ModelHeader::set_checksum(const std::string& value) {
  _internal_set_checksum(value);
  // @@protoc_insertion_point(field_set:newtranx.ai_server.ModelHeader.checksum)
}
inline std::string* ModelHeader::mutable_checksum() {
  // @@protoc_insertion_point(field_mutable:newtranx.ai_server.ModelHeader.checksum)
  return _internal_mutable_checksum();
}
inline const std::string& ModelHeader::_internal_checksum() const {
  return checksum_.Get();
}
inline void ModelHeader::_internal_set_checksum(const std::string& value) {
  
  checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelHeader::set_checksum(std::string&& value) {
  
  checksum_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:newtranx.ai_server.ModelHeader.checksum)
}
inline void ModelHeader::set_checksum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:newtranx.ai_server.ModelHeader.checksum)
}
inline void ModelHeader::set_checksum(const char* value,
    size_t size) {
  
  checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:newtranx.ai_server.ModelHeader.checksum)
}
inline std::string* ModelHeader::_internal_mutable_checksum() {
  
  return checksum_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelHeader::release_checksum() {
  // @@protoc_insertion_point(field_release:newtranx.ai_server.ModelHeader.checksum)
  return checksum_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelHeader::set_allocated_checksum(std::string* checksum) {
  if (checksum != nullptr) {
    
  } else {
    
  }
  checksum_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checksum,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:newtranx.ai_server.ModelHeader.checksum)
}
inline std::string* ModelHeader::unsafe_arena_release_checksum() {
  // @@protoc_insertion_point(field_unsafe_arena_release:newtranx.ai_server.ModelHeader.checksum)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return checksum_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ModelHeader::unsafe_arena_set_allocated_checksum(
    std::string* checksum) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (checksum != nullptr) {
    
  } else {
    
  }
  checksum_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      checksum, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:newtranx.ai_server.ModelHeader.checksum)
}

// string original_filename = 70;
inline void ModelHeader::clear_original_filename() {
  original_filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModelHeader::original_filename() const {
  // @@protoc_insertion_point(field_get:newtranx.ai_server.ModelHeader.original_filename)
  return _internal_original_filename();
}
inline void ModelHeader::set_original_filename(const std::string& value) {
  _internal_set_original_filename(value);
  // @@protoc_insertion_point(field_set:newtranx.ai_server.ModelHeader.original_filename)
}
inline std::string* ModelHeader::mutable_original_filename() {
  // @@protoc_insertion_point(field_mutable:newtranx.ai_server.ModelHeader.original_filename)
  return _internal_mutable_original_filename();
}
inline const std::string& ModelHeader::_internal_original_filename() const {
  return original_filename_.Get();
}
inline void ModelHeader::_internal_set_original_filename(const std::string& value) {
  
  original_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelHeader::set_original_filename(std::string&& value) {
  
  original_filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:newtranx.ai_server.ModelHeader.original_filename)
}
inline void ModelHeader::set_original_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  original_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:newtranx.ai_server.ModelHeader.original_filename)
}
inline void ModelHeader::set_original_filename(const char* value,
    size_t size) {
  
  original_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:newtranx.ai_server.ModelHeader.original_filename)
}
inline std::string* ModelHeader::_internal_mutable_original_filename() {
  
  return original_filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelHeader::release_original_filename() {
  // @@protoc_insertion_point(field_release:newtranx.ai_server.ModelHeader.original_filename)
  return original_filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelHeader::set_allocated_original_filename(std::string* original_filename) {
  if (original_filename != nullptr) {
    
  } else {
    
  }
  original_filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:newtranx.ai_server.ModelHeader.original_filename)
}
inline std::string* ModelHeader::unsafe_arena_release_original_filename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:newtranx.ai_server.ModelHeader.original_filename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return original_filename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ModelHeader::unsafe_arena_set_allocated_original_filename(
    std::string* original_filename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (original_filename != nullptr) {
    
  } else {
    
  }
  original_filename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      original_filename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:newtranx.ai_server.ModelHeader.original_filename)
}

// bool is_directory = 80;
inline void ModelHeader::clear_is_directory() {
  is_directory_ = false;
}
inline bool ModelHeader::_internal_is_directory() const {
  return is_directory_;
}
inline bool ModelHeader::is_directory() const {
  // @@protoc_insertion_point(field_get:newtranx.ai_server.ModelHeader.is_directory)
  return _internal_is_directory();
}
inline void ModelHeader::_internal_set_is_directory(bool value) {
  
  is_directory_ = value;
}
inline void ModelHeader::set_is_directory(bool value) {
  _internal_set_is_directory(value);
  // @@protoc_insertion_point(field_set:newtranx.ai_server.ModelHeader.is_directory)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ai_server
}  // namespace newtranx

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_model_5fheader_2eproto
