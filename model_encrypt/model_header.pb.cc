// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_header.proto

#include "model_header.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace newtranx {
namespace ai_server {
class ModelHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelHeader> _instance;
} _ModelHeader_default_instance_;
}  // namespace ai_server
}  // namespace newtranx
static void InitDefaultsscc_info_ModelHeader_model_5fheader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::newtranx::ai_server::_ModelHeader_default_instance_;
    new (ptr) ::newtranx::ai_server::ModelHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::newtranx::ai_server::ModelHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelHeader_model_5fheader_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelHeader_model_5fheader_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_model_5fheader_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_model_5fheader_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_model_5fheader_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_model_5fheader_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newtranx::ai_server::ModelHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::newtranx::ai_server::ModelHeader, model_id_),
  PROTOBUF_FIELD_OFFSET(::newtranx::ai_server::ModelHeader, expire_date_),
  PROTOBUF_FIELD_OFFSET(::newtranx::ai_server::ModelHeader, n_concurrency_),
  PROTOBUF_FIELD_OFFSET(::newtranx::ai_server::ModelHeader, start_pos_),
  PROTOBUF_FIELD_OFFSET(::newtranx::ai_server::ModelHeader, end_pos_),
  PROTOBUF_FIELD_OFFSET(::newtranx::ai_server::ModelHeader, checksum_),
  PROTOBUF_FIELD_OFFSET(::newtranx::ai_server::ModelHeader, original_filename_),
  PROTOBUF_FIELD_OFFSET(::newtranx::ai_server::ModelHeader, is_directory_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::newtranx::ai_server::ModelHeader)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newtranx::ai_server::_ModelHeader_default_instance_),
};

const char descriptor_table_protodef_model_5fheader_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022model_header.proto\022\022newtranx.ai_server"
  "\"\262\001\n\013ModelHeader\022\020\n\010model_id\030\n \001(\t\022\023\n\013ex"
  "pire_date\030\024 \001(\t\022\025\n\rn_concurrency\030\036 \001(\r\022\021"
  "\n\tstart_pos\030( \001(\004\022\017\n\007end_pos\0302 \001(\004\022\020\n\010ch"
  "ecksum\030< \001(\t\022\031\n\021original_filename\030F \001(\t\022"
  "\024\n\014is_directory\030P \001(\010B\003\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_model_5fheader_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_model_5fheader_2eproto_sccs[1] = {
  &scc_info_ModelHeader_model_5fheader_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_model_5fheader_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_5fheader_2eproto = {
  false, false, descriptor_table_protodef_model_5fheader_2eproto, "model_header.proto", 234,
  &descriptor_table_model_5fheader_2eproto_once, descriptor_table_model_5fheader_2eproto_sccs, descriptor_table_model_5fheader_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_model_5fheader_2eproto::offsets,
  file_level_metadata_model_5fheader_2eproto, 1, file_level_enum_descriptors_model_5fheader_2eproto, file_level_service_descriptors_model_5fheader_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_model_5fheader_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_model_5fheader_2eproto)), true);
namespace newtranx {
namespace ai_server {

// ===================================================================

void ModelHeader::InitAsDefaultInstance() {
}
class ModelHeader::_Internal {
 public:
};

ModelHeader::ModelHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:newtranx.ai_server.ModelHeader)
}
ModelHeader::ModelHeader(const ModelHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_model_id(),
      GetArena());
  }
  expire_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expire_date().empty()) {
    expire_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_expire_date(),
      GetArena());
  }
  checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_checksum().empty()) {
    checksum_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_checksum(),
      GetArena());
  }
  original_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_original_filename().empty()) {
    original_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_original_filename(),
      GetArena());
  }
  ::memcpy(&start_pos_, &from.start_pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_directory_) -
    reinterpret_cast<char*>(&start_pos_)) + sizeof(is_directory_));
  // @@protoc_insertion_point(copy_constructor:newtranx.ai_server.ModelHeader)
}

void ModelHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelHeader_model_5fheader_2eproto.base);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expire_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checksum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_directory_) -
      reinterpret_cast<char*>(&start_pos_)) + sizeof(is_directory_));
}

ModelHeader::~ModelHeader() {
  // @@protoc_insertion_point(destructor:newtranx.ai_server.ModelHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expire_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  checksum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  original_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelHeader::ArenaDtor(void* object) {
  ModelHeader* _this = reinterpret_cast< ModelHeader* >(object);
  (void)_this;
}
void ModelHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelHeader& ModelHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelHeader_model_5fheader_2eproto.base);
  return *internal_default_instance();
}


void ModelHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:newtranx.ai_server.ModelHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expire_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checksum_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  original_filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&start_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_directory_) -
      reinterpret_cast<char*>(&start_pos_)) + sizeof(is_directory_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string model_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "newtranx.ai_server.ModelHeader.model_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expire_date = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_expire_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "newtranx.ai_server.ModelHeader.expire_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 n_concurrency = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          n_concurrency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_pos = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          start_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_pos = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          end_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string checksum = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_checksum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "newtranx.ai_server.ModelHeader.checksum"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string original_filename = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_original_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "newtranx.ai_server.ModelHeader.original_filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_directory = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          is_directory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newtranx.ai_server.ModelHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_id = 10;
  if (this->model_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newtranx.ai_server.ModelHeader.model_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_model_id(), target);
  }

  // string expire_date = 20;
  if (this->expire_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expire_date().data(), static_cast<int>(this->_internal_expire_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newtranx.ai_server.ModelHeader.expire_date");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_expire_date(), target);
  }

  // uint32 n_concurrency = 30;
  if (this->n_concurrency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_n_concurrency(), target);
  }

  // uint64 start_pos = 40;
  if (this->start_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(40, this->_internal_start_pos(), target);
  }

  // uint64 end_pos = 50;
  if (this->end_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(50, this->_internal_end_pos(), target);
  }

  // string checksum = 60;
  if (this->checksum().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checksum().data(), static_cast<int>(this->_internal_checksum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newtranx.ai_server.ModelHeader.checksum");
    target = stream->WriteStringMaybeAliased(
        60, this->_internal_checksum(), target);
  }

  // string original_filename = 70;
  if (this->original_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_original_filename().data(), static_cast<int>(this->_internal_original_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newtranx.ai_server.ModelHeader.original_filename");
    target = stream->WriteStringMaybeAliased(
        70, this->_internal_original_filename(), target);
  }

  // bool is_directory = 80;
  if (this->is_directory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(80, this->_internal_is_directory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newtranx.ai_server.ModelHeader)
  return target;
}

size_t ModelHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newtranx.ai_server.ModelHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_id = 10;
  if (this->model_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  // string expire_date = 20;
  if (this->expire_date().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expire_date());
  }

  // string checksum = 60;
  if (this->checksum().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checksum());
  }

  // string original_filename = 70;
  if (this->original_filename().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_original_filename());
  }

  // uint64 start_pos = 40;
  if (this->start_pos() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_pos());
  }

  // uint64 end_pos = 50;
  if (this->end_pos() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end_pos());
  }

  // uint32 n_concurrency = 30;
  if (this->n_concurrency() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n_concurrency());
  }

  // bool is_directory = 80;
  if (this->is_directory() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:newtranx.ai_server.ModelHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:newtranx.ai_server.ModelHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:newtranx.ai_server.ModelHeader)
    MergeFrom(*source);
  }
}

void ModelHeader::MergeFrom(const ModelHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newtranx.ai_server.ModelHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_id().size() > 0) {
    _internal_set_model_id(from._internal_model_id());
  }
  if (from.expire_date().size() > 0) {
    _internal_set_expire_date(from._internal_expire_date());
  }
  if (from.checksum().size() > 0) {
    _internal_set_checksum(from._internal_checksum());
  }
  if (from.original_filename().size() > 0) {
    _internal_set_original_filename(from._internal_original_filename());
  }
  if (from.start_pos() != 0) {
    _internal_set_start_pos(from._internal_start_pos());
  }
  if (from.end_pos() != 0) {
    _internal_set_end_pos(from._internal_end_pos());
  }
  if (from.n_concurrency() != 0) {
    _internal_set_n_concurrency(from._internal_n_concurrency());
  }
  if (from.is_directory() != 0) {
    _internal_set_is_directory(from._internal_is_directory());
  }
}

void ModelHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:newtranx.ai_server.ModelHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelHeader::CopyFrom(const ModelHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newtranx.ai_server.ModelHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelHeader::IsInitialized() const {
  return true;
}

void ModelHeader::InternalSwap(ModelHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  model_id_.Swap(&other->model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expire_date_.Swap(&other->expire_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  checksum_.Swap(&other->checksum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  original_filename_.Swap(&other->original_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelHeader, is_directory_)
      + sizeof(ModelHeader::is_directory_)
      - PROTOBUF_FIELD_OFFSET(ModelHeader, start_pos_)>(
          reinterpret_cast<char*>(&start_pos_),
          reinterpret_cast<char*>(&other->start_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ai_server
}  // namespace newtranx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::newtranx::ai_server::ModelHeader* Arena::CreateMaybeMessage< ::newtranx::ai_server::ModelHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newtranx::ai_server::ModelHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
